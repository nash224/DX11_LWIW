

 = 개발 Tool = 
 {
	- Visual Studio
	- C++
	- HLSL
	
	= 외부 라이브러리 = 
	{
		- FMOD
		- DirectTex
		- FontWrapper
	}
 }

 = 개발 기반 =
 {
	- GameEngineFrameWork
	- 레벨로 관리
 }


 = 게임 설명 =
 {
	- 짧은 개요
	- 엔딩 조건
 }

 = 메인메뉴(Title) =
 {
	= MainCamera =
	{
		= Z Order =
		{
			- 엔진에서 제공해주는 Z정렬로 그리는 순서 결정
		}

		- 3D 환경 => 엔진에서 지원해주는 프리 카메라 모드로 보면 
		- 깊이 => Z 값이 멀어(커질)수록 멀리 배치됨 
		- 산과 열차가 지나가는 교량 => 위치는 고정으로 설정하고 버텍스 쉐이더에서 UV 값만 올렸다.
			= 기소서 : 옵션, 쉐이더코드, 클래스

		- 구름, 나무 => 특정 위치에 도달하면 액터를 생성되게 했다.
		- 기차 State => 하나씩 올라가고 내려가게
		- 물가에 투영된 텍스처 => 블랜드 옵션::알파 블랜드, 텍스처를 겹쳐서 알파블랜드 적용
	}

	= UI = (카메라 오더가 나중)
	{
		- UI 카메라로 로고와 폰트 
	}
 }

 = 맵 =
 {
	= 액터 =
	{
		- 바닥
		- 소품
		- 상호작용
		- 포탈
	}

	= 픽셀 충돌 =
	{
		- 카메라의 렌더 타겟에 찍힌 텍스처를 픽셀 충돌로 사용
		- 엔진에서 지원해주는 Imgui 디버깅 렌더타겟의 텍스처로 확인 가능
	}

	= Creature 생성 구조 =
	{
		= Day =
		{
			- 아침이 될 때, 모든 채집물을 생성.
		}

		= Night =
		{
			- 밤이 되면 낮에만 존재하는 생물은 필드를 떠남.
			- 밤에만 채집 가능한 생물들의 충돌체가 켜짐
		}

		= DayChange = 
		{
			- 기존에 있던 생물들을 정리하고 Day상태로 전환
		}
	}
 }

 = 플레이어 =
 {
	= 렌더러 = 
	{
		- 앨리 몸 
		{
			- 상태 기반으로 애니메이션이 변경됨
			- Y값에 따라서 Z 계산
		}

		= 버질(모자 얼굴) =
		{
			- 앨리 몸보다 높게
			- 몸의 프레임 애니메이션 인덱스에 따라 적용
		}

		= 그림자 = 
		{
			- 깊이를 바닥값보다 높게 설정
		}
	}

	= 상태 =
	{
		= 이동 =
		{
			- 입력에 따라 방향 결정
			- 플레이어의 자연스러운 방향전환을 위해 같은 생태일 때, 인덱스 값을 동일하게 적용 => 예시
			- 서있기, 걷기, 천천히 걷기, 달리기
			- 벽과 충돌시 진행방향으로 밀리게 적용
			- 달릴때 스태미나 감소
		}

		= 빗자루 모드 =
		{
			= 특징 =
			{
				- 가속도 적용
				- 속도 최대값
				- 벽이랑 충돌 시 방향 벡터의 반대방향으로 밀어주는 것으로 적용
				- 연료 소모
				- 가속시 2배 소모
			}

			= 상태 =
			{
				- Standing
				- Move
				- Boost
			}

			= 빗자루 연기 =
			{
				- 일정시간마다 생성 (파티클x)
			}
		}

		= 상호작용 =
		{
			- 상호작용 시 스태미나 소모 => 스태미나는 날이 지나면 회복
			- 충돌체의 오더 값에 따라 충돌처리
			- 상호작용 액터 선택 기준
			- 충돌한 객체 중에서 시야 범위 안에 들어온 객체를 선별
			- 디버그로 시야 범위 확인 가능
			- 가장 가까운 액터

			= 상호작용 액터의 옵션 =
			{
				- 버튼 종류
				- 근접과 원격 상호작용
				- 즉시 상호작용 및 지속 상호작용

				= 상호작용 타입 =
				{
					- 다가가서 작호작용 수행
					- Sit => 줍기
					- RootUp => 식물 뽑기
					- Mongsiri => 몽시리 털뽑기
					- Juicy => 재료 가공
					- Lift => 엘리베이터 사용
					- Wait => 가공준비 또는 다른 상호작용
				}

				= 도구 상호작용 =
				{
					- Glove => 일반 채집
					- Net => 잠자리채 채집
					- Pen => 도감 작성 (구현x)
				}
			}
		}
	}
 }

 = 상호작용 액터 종류 =
 {
	= Creature =
	{
		= BranchTree = 
		{
			- 나무를 흔들어 드랍템 나뭇가지를 떨어뜨림
			- 기능으로 CircleGauge를 값형으로 가지고 있음
			- 사용처 없음 (구현x)
		}

		= WitchFlower =
		{
			- 상호작용시 마녀의 꽃을 뜯어 채집할 수 있음
		}

		= SilverStarBell =
		{
			- 밤에만 채집할 수 있으며, 몸을 붙이쳐 꽃가루를 생성함 => (파티클 x)
			- 일정시간안에 꽃가루를 잠자리채로 채집할 수 있음
			- 발광 기능을 가지고 있어, 밤이 되면 발광효과를 가짐 
		}

		= Bush = 
		{
			= 3가지 타입 =
			{
				- 일반 덤불 => 아무 상호작용도 할 수 없음
				- 사과 덤불 => 상호작용시 사과를 드랍함 => 원작에서는 사과를 먹을 수 있지만, 구현하지 않음
				- BushBug 덤불 => 상호작용시 생물 덤풀벌레를 생성함
			}
		}

		= BushBug = 
		{
			- 채집은 잠자리채로 가능
			- 이동 방향이 특정 각도 이하로 정해져있어 수풀에서 벗어나지 않게 조정
			- 발광 기능을 가지고 있어, 밤이 되면 발광효과를 가짐 
		}

		= FlowerBird =
		{
			- 가공재료 새 꽃 채집물을 드랍함
			- 동일한 랜덤 값으로 Idle에서 특정 상태로 전환
			- 기능으로 Emoji를 값형으로 가지고 있음

			= 상태 =
			{
				- Idle => 다음 상태 대기
				- Turn => 방향 전환
				- Pick => 모이쪼기

				= Fly =
				{
					- 플레이어가 접근시 위협을 느껴 날아감
					- 플레이어가 살살 걸으면 일반 범위보다 더 가까이 다가갈 수 있음
					- 날아갈 때, 느낌표 이모지를 출력함
				}

				- Bloom => 일정 시간동안 완전한 꽃을 피움 => 이 때 다가갈시 채집물 새 꽃을 드랍함
				- BloomFake => 꽃을 피우지만 바로 시들어버림 => 이 때 다가갈시 채집물 드랍하지 않음
			}
		}

		= Mongsiri = 
		{
			- 상호작용시 가공재료 몽시리 털을 얻을 수 있음
			- 생성할 때, 2~3마리씩 개체군으로 생성
			- 몽시리를 관리하는 MongSiriPopulation이 몽시리 탈출 구멍 Hole과 몽시리를 관리
			- 기능으로 Emoji를 값형으로 가지고 있음
			- 채집한 몽시리는 충돌체가 꺼져 상호작용이 불가능한 상태가 됩니다.

			= 상태 = 
			{
				- Idle => 주변에 플레이어가 없을 때, 다음 상태 대기
				- Jump => 몽시리가 움직일 때 패턴

				= 개체군 State = 
				{
					- Normal => 도망치지 않음
					- Escape => 밤이 되거나 개체군 안의 몽시리가 채집됐을 때, 개체군 상태가 전환
				}

				= Look =
				{
					- State::Look에서 LookState가 업데이트됨

					= Recognize =
					{
						- 일정범위 안에 플레이어가 존재하면 플레이어를 따라 가만히 처다봄
						- 처음 인식했을 때, 이모지 물음표를 띄움
					}

					= NotRecognize = 
					{
						- 인식 상태에서 플레이어가 인식 범위 밖으로 나가면 일정 시간이 지난 후 Idle로 전환
						- 인식 범위 밖으로 나갈 때, 이모지 물음표를 띄움
					}
				}

				- Caught => 플레이어가 상호작용할 때, 원격으로 가만히 있게하는 상태 => 일정범위 안에 들어서면 Collectd로 전환
				- Collected => 채집 상태 => 특정 프레임에 아이템 획득 => 개체군에게 Escape  알림
				- Disappear => 몽시리가 구멍에 들어감 => 충돌체 Off
			}
		}
	}

	= Machine =
	{
		- 각 기계들은 자신만의 UI가 있음
		- 특정 조건으로 채집물을 가공하거나 포션을 제작할 수 있음

		= 착즙기 =
		{
			- 처음에는 부셔진 상태로 있음 => 부서진 상태면 수리도구 유리병이 필요함 => 유리병을 가지고 있으면 착즙기 활성화
			- 채집물을 가공하여 포션 제작의 기반인 가공품으로 만들 수 있음
		}

		= 연금 솥 =
		{
			- 먼지를 치우면 솥이 활성화됨
			- 사전과 데이터가 연결되어 있어 특정 조합식에 맞춰 포션 생성
			- 특정 조합식은 불세기, 국자 젓는 방향, 재료들로 구성되어 있음
			- 넣은 재료와 선택한 옵션이 특정 조합식에 만족하면 포션을 제작할 수 있음
			- 포션 조합식과 일치하는게 없으면 실패상태로 전환
			- 일치하면 성공 상태로 전환되어 아이템을 인벤토리에 저장
		}

		- 로스터(구현x)
	}

	= Npc =
	{
		- 대화 기능을 가짐
		- 퀘스트 아이템을 요구하고 

		= Dian =
		{
			- 특정 조건을 만족하면 마녀의 집 마당으로 찾아옴 (까마귀 이벤트를 보고 다음 날이 지나면 생성)
			- 각종 퀘스트들이 있고, 보상으로 빗자루, 잠자리채 등을 얻을 수 있음
		}

		= Aurea = 
		{
			- 특정 조건을 만족하면 평원에 자연의 저주가 걸린 채로 등장
			- 저주를 해제하기 위해서 퀘스트 아이템인 저주해제 사탕을 요구
			- 퀘스트 보상으로 부셔진 착즙기 수리도구인 착즙기 유리병을 얻을 수 있음
		}
	}

	= Objects =
	{
		= Bed =
		{
			- 상호작용을 해서 날을 바꿀 수 있는 선택지 UI가 나타남
			- '네'를 선택하면 DreamLevel로 전환
		}

		= Event Objects =
		{
			-  상호작용시 대화 이벤트 생성

			- Dust
			- Letter 
		}

		= LootedItem = 
		{
			- 떨어진 아이템에 상호작용시 다가가서 주워 인벤토리 데이터에 저장
		}

		= Lift =
		{
			- 마녀의 집에서 마녀의 작업실로 이동하는 수단
			- 처음에는 먼지에 뒤덥혀 있어 사용이 불가능 => 먼지를 털어내면 활성화
		}
	}
 }

 = Manager = 
 {
	= Camera Controler =
	{
		- 카메라가 게임 밖으로 나가지 못하게 막아주는 기능을 제공
		- 레벨 전환시, 카메라를 자동으로 배경 내부로 옮겨주는 기능을 제공

		= 카메라 모드 =
		{
			- Fix => 위치를 고정함
			- Play => 지정한 액터를 따라다님
			- Cinematic => 이벤트일 때, 사용하는 카메라 모드
		}
	}

	= BGM Manager = 
	{
		- 배경음이 전환될 때, 소리가 줄어들거나 커지는 기능을 제공함
	}

	= Time Manager = 
	{
		- 인게임의 Time, 시간 비율, 시간, 분을 제공
	}

	= Sky Lerp =
	{
		- 화면 크기만한 흰 텍스처의 색을 조정해 낮에서 밤으로 어두워 지는 효과
		- 필드, 마녀의 집안, 마녀의 작업실에서 사용
		- Time Manager에서 계산된 시간을 이용해 정해진 색으로 보간해서 구현
		- 후처리 리소스로 사용됨
	}

	= UI Manager = 
	{
		- 인게임 레벨마다 UIManager를 가지고 있음
		- Inventory, UIHub, Dictionary 를 관리
		- 사전이나 인벤토리를 열고 닫을때 UIHub를 키고 끌 수 있음

		= UIHub = 
		{
			UITool, Stamina, QuickSlot, Calendar, Broom, MainBoard를 관리

			= UITool = 
			{
				- 현재 들고 있는 도구를 보여줌 
				- QW를 입력해 도구 변경
			}

			= Stamina =
			{
				- 게이지 기능을 가지고 있음
				- 플레이어의 스태미나에 따라 수평 게이지 조절
			}

			= QuickSlot =
			{
				- 미구현 기능
			}

			= Broom =
			{
				- 게이지 기능을 가지고 있음
				- 앨리가 빗자루를 얻게 되면 켜짐
				- 빗자루 연료에 따라 수평 게이지 조절
			}

			= Calendar =
			{
				- Time Manager에서 얻어온 Time, Day로 인게임 시간 출력
			}

			= MainBoard = 
			{
				- 퀘스트를 관리
				- Quest Manager로 통해 퀘스트 등록, 퀘스트 클리어할 수 있음
			}
		}

		= Dictionary = 
		{
			- 채집물의 정보를 보여줌
			- 식물, 동물, 물약, 사탕 카테고리가 있음
			- 식물, 동물 카테고리는 이름, 생김새, 서식지, 채집 시간, 채집 도구, 특징, 특이점 확인
			- 포션, 사탕 카테고리는 이름, 설명, 난이도, 불 세기, 젓는 방향, 재료가 있음
		}

		= Inventory =
		{
			- 커서 이동, 아이템 저장, 아이템 빼기, 아이템 존재여부 기능만 있음

			= Inventory Mode =
			{
				- 일반 모드 => 아이템 확인 용도
				- 연금 모드 => 연금 제작 때, 아이템 선택 기능
			}
		}

		= Drop Manager = 
		{
			- 아이템 획득시, 획득 알림 출력
			- 최대 4줄까지 알림 유지
		}
	}

	= Conversation 기능 =
	{
		- 대화 시스템을 값형으로 제공
		- 인게임 레벨마다 대화 UI를 가지고 있음
		- UI_Conversation을 UI Manager가 관리
	}

	= InteractiveMark =
	{
		- 상호작용 표시 기능
		- 버튼 형식, 화살표 형식으로 구분
		- 앨리가 상호작용 액터를 상호작용 대상으로 지정하면 표시됨
		- Arrow 타입은 외곽선과 함께 표시
	}

	= Alert Manager =
	{
		- 퀘스트 등록, 퀘스트 클리어, 맵 입장 시스템 알림을 관리

		= Alert Type =
		{
			- EnterAlert => 일부 레벨 입장시 맵 이름과 함께 알림
			- Quest Register Alert => 퀘스트 등록시 알림
			- Quest Clear Alert => 퀘스트 클리어시 알림
		}

		- 전역 변수 Alert Data에 등록
		- 알림이 없거나 끝나면 등록된 Data를 꺼내 알림 재생
	}
 }

 = Button Guide 기능 =
 {
	- 입력 가능한 버튼을 보여줌
 }

 = Event = 
 {
	- 특정 조건에 부합하면 게임에서 정의한 이벤트 실행
 }

 
 = Light Render =
 {
	- 빛의 색은 화면에 보여지는 카메라 렌더타겟에 출력
	- 빛의 세기를 후처리용 렌더타겟에 출력
 }

 = Effect(PostProcessing) =
 {
	= OutLine Effect =
	{
		- 외곽선 효과
		- 이벤트 및 상호작용 액터 표시로 사용
	}

	= SkyLerp Effect =
	{
		- 밤이 어두워지는 효과 구현
		- 빛 렌더러의 알파값에 따라 Sky 필터의 알파값 조정
		- 처리된 색을 LevelRenderTarget에 머지
		- 빛 세기 감마수치 만큼 SkyLerp 감마 수치를 빼서 출력
	}
 }

 = 디버깅 툴 =
 {
	= Cheat Tab =
	{
		- 재료, 가공품, 포션, 퀘스트 재료 등을 얻을 수 있음
	}

	= Sky Data =
	{
		- 시간조절 기능
		- Sky Data 설정 기능
		- 설정한 데이터 저장기능
	}
	
	= 에디터 =
	{
		- Imgui
		- 크기, 회전, 이동
		- 선택, 선택해제
		- 렌더 X, Y값 조절
		- 픽셀 데이터 선택 => 사진

		= 세이브, 로드 =
		{
			- 바이너리 데이터 
			- 사용처 : 맵을 구성하는 소품에 사용
		}
	}
 }


 {
	Email
	Git
 }
